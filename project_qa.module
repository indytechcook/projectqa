<?php
/**
 * @file
 * project_qa module implementation
 */

module_load_include('inc', 'project_qa', 'project_qa.admin');
module_load_include('inc', 'project_qa', 'project_qa.phploc');
module_load_include('inc', 'project_qa', 'project_qa.git');



/**
 * Get a list of projects registered to track.
 *
 * @param array $header
 *   The header array to sort on.
 *
 * @return array
 *   The list of projects.
 */
function project_qa_get_projects($header = NULL) {
  $query = db_select('project_qa_repo', 'p')
    ->fields('p',
      array(
        'pid',
        'name',
        'url',
        'branch',
      )
    )
    ->extend('TableSort');

  if ($header) {
    $query->orderByHeader($header);
  }
  $result = $query->execute();

  return $result;
}


/**
 * Gets the filepath to where the project repos are stored locally.
 *
 * @return string
 *   The system path to the repos location.
 */
function project_qa_get_filepath() {
  // TODO:
  $path = '/tmp/project_qa';

  return $path;
}


function project_qa_walk_projects() {
  $projects = project_qa_get_projects();
  $filepath = project_qa_get_filepath();

  foreach ($projects as $project) {
    drush_print(t('Processing ' . $project->name), 0);

    $repo_path = $filepath . '/' . $project->name;
    project_qa_prep_repo($project, $repo_path);
    project_qa_walk_repo($project, $repo_path);
  }
}


function project_qa_prep_repo($project, $repo_path) {
  // Check for exisisting copy of the repo.
  if (file_exists($repo_path)) {
    project_qa_execute_git($repo_path, 'pull'); // Update repo.
  }
  else {
    exec('git clone ' . $project->url . ' ' . $repo_path); // Get the repo.
  }

  project_qa_execute_git($repo_path, 'checkout ' . $project->branch);
}


function project_qa_walk_repo($project, $repo_path) {
  drush_print(t('walking repo'), 1);
  // Get the currently saved git commits
  $query = db_select('project_qa_gitcommit', 'pqgc')
    ->fields('pqgc', array('sha1'))
    ->condition('pid', $project->pid, '=')
    ->orderBy('timestamp', 'DESC');
  $result = $query->execute();
  $processed_commits = $result->fetchAllAssoc('sha1');
  $processed_commits = array_keys($processed_commits);

  $log_options[] = '--no-merges';
  $log_options[] = '--date-order';
  $log_options[] = '--reverse';
  $log_options[] = '--format=medium';
  $log_options[] = $project->branch;

  $log = project_qa_execute_git($repo_path, 'log', $log_options);
  $revisions = project_qa_process_git_revisions($log);
  $all_hashes = array_keys($revisions);

  $unprocessed_commits = array_diff($all_hashes, $processed_commits);
  $total_num = count($unprocessed_commits);

  $iteration_counter = 0;
  foreach ($unprocessed_commits as $commit_hash) {
    if ($iteration_counter % 50 == 0) {
      drush_print(
        t('commit @num of @total',
          array(
            '@num' => $iteration_counter,
            '@total' => $total_num)),
        1);


    }
    $iteration_counter++;
    // Check out this commit.
    project_qa_execute_git(
      $repo_path,
      'checkout',
      array(
        '--force',
        '--quiet',
        $commit_hash,
        '2>&1',
      )
    );

    // TODO: Calculate the code diff size

    $git_commit_data = array(
      'sha1' => $commit_hash,
      'pid' => $project->pid,
      'timestamp' => $revisions[$commit_hash]['date']->getTimestamp(),
      'author' => $revisions[$commit_hash]['author'],
    );
    $git_commit = entity_create('project_qa_gitcommit', $git_commit_data);
    $git_commit->save();


    module_invoke_all("eval_gitcommit", $repo_path, $git_commit);
  }


  // Reset the repo back to HEAD.
  project_qa_execute_git(
    $repo_path,
    'checkout',
    array(
      '--force',
      '--quiet',
      $project->branch,
    )
  );

  // Refresh the git tags.
  project_qa_process_git_tags($repo_path, $project->pid);
}


/**
 * Processes the git response into an array of revisions data.
 *
 * @param array $git_log
 *   The git log response to process.
 *
 * @return array
 *   The revisions information array.
 */
function project_qa_process_git_revisions($git_log) {
  $num_lines  = count($git_log);
  $revisions = array();

  for ($i = 0; $i < $num_lines; $i++) {
    $tmp = explode(' ', $git_log[$i]);

    if (count($tmp) == 2 && $tmp[0] == 'commit') {
      $sha1 = $tmp[1];
    }
    elseif (count($tmp) == 4 && $tmp[0] == 'Author:') {
      $author = implode(' ', array_slice($tmp, 1));
    }
    elseif (count($tmp) == 9 && $tmp[0] == 'Date:') {
      $revisions[$sha1] = array(
        'author'  => $author,
        'date'    => \DateTime::createFromFormat(
          'D M j H:i:s Y O',
          implode(' ', array_slice($tmp, 3))
        ),
        'message' => isset($git_log[$i + 2]) ? trim($git_log[$i + 2]) : '',
      );
    }
  }

  return $revisions;
}


/**
 * Processes the git response into an array of tag data.
 *
 * @param array $git_tags
 *   The git tags response to process.
 *
 * @return array
 *   The tags information array.
 */
function project_qa_process_git_tags($repo_path, $pid) {
  drush_print(t('walking tags'), 1);
  $all_tags = project_qa_get_all_tags($repo_path);

  $tag_data = array();
  foreach ($all_tags as $tag) {
    $data = split(' refs/tags/', $tag);
    $tag_data[$data[0]] = $data[1];
  }

  // Get all processed tags
  $query = db_select('project_qa_gittag', 'pqgt')
    ->fields('pqgt', array('gcid', 'tagname'))
    ->fields('pqgc', array('sha1'))
    ->condition('pid', $pid, '=');
  $query->innerJoin('project_qa_gitcommit', 'pqgc', 'pqgc.gcid = pqgt.gcid');
  $results = $query->execute();

  $processed_tags = $results->fetchAllAssoc('tagname');
  $processed_tag_names = array_keys($processed_tags);

  foreach ($tag_data as $key => $value) {
    $data = array();
    if($processed_tags[$value]->tagname != $value) {
      $gcid = project_qa_get_commit_id($key);

      if(isset($gcid)) { // Only save tags that point to commits we're tracking
        $data['gcid'] = $gcid;
        $data['tagger'] = 'person'; // TODO:
        $data['timestamp'] = 0; // TODO: 
        $data['tagname'] = $value;

        $git_tag = entity_create('project_qa_gittag', $data);
        $git_tag->save();
      }
    }
  }

  // TODO: remove deleted tags
}


function project_qa_get_commit_id($hash) {
  $query = db_select('project_qa_gitcommit', 'pqgc')
    ->fields('pqgc', array('gcid', 'sha1'))
    ->condition('pqgc.sha1', $hash, '=');
  $response = $query->execute();
  $result = $response->fetchAssoc();
  return $result['gcid'];
}



