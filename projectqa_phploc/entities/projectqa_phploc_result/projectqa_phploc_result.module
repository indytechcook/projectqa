<?php

/**
 * @file
 * projectqa_phploc_result entity code.
 */

/**
 * Implements hook_entity_info().
 */
function projectqa_phploc_result_entity_info() {
  return array(
    'projectqa_phploc_result' => array(
      'label' => t('PHPLOC Result'),
      'entity class' => 'PhplocResult',
      'controller class' => 'PhplocResultController',
      'base table' => 'projectqa_phploc_result',
      'uri callback' => 'projectqa_phploc_result_uri',
      'fieldable' => TRUE,
      'entity keys' => array(
        'id' => 'prid',
      ),
      'static cache' => TRUE,
      'module' => 'projectqa_phploc_result',
      'views controller class' => 'EntityDefaultViewsController',
    ),
  );
}


/**
 * Implements hook_entity_property_info().
 */
function projectqa_phploc_result_entity_property_info() {
  $info = array();
  $properties = &$info['projectqa_phploc_result']['properties'];

  $properties['prid'] = array(
    'label' => 'PHPLOC Result ID',
    'description' => t('The unique ID for the phploc result (delta).'),
    'type' => 'integer',
    'schema field' => 'prid',
  );
  $properties['gcid'] = array(
    'label' => 'Git commit ID',
    'description' => t('The unique ID for the git commit (delta).'),
    'type' => 'projectqa_gitcommit',
    'schema field' => 'gcid',
  );
  $properties['files'] = array(
    'label' => 'Files',
    'description' => t('The number of files (delta).'),
    'type' => 'integer',
    'schema field' => 'files',
  );
  $properties['loc'] = array(
    'label' => 'Lines of Code',
    'description' => t('The number of lines of code (delta).'),
    'type' => 'integer',
    'schema field' => 'loc',
  );
  $properties['lloc'] = array(
    'label' => 'Logical lines of code (LLOC)',
    'description' => t('The number of logical lines of code (delta).'),
    'type' => 'integer',
    'schema field' => 'lloc',
  );
  $properties['llocClasses'] = array(
    'label' => 'LLOC in classes',
    'description' => t('The number of LLOC in classes (delta).'),
    'type' => 'integer',
    'schema field' => 'llocClasses',
  );
  $properties['llocFunction'] = array(
    'label' => 'LLOC in functions',
    'description' => t('The number of LLOC in functions'),
    'type' => 'integer',
    'schema field' => 'llocFunction',
  );
  $properties['llocGlobal'] = array(
    'label' => 'llocGlobal',
    'description' => t('llocGlobal'),
    'type' => 'integer',
    'schema field' => 'llocGlobal',
  );
  $properties['cloc'] = array(
    'label' => 'Commented lines of code',
    'description' => t('The number of commented lines of code (delta).'),
    'type' => 'integer',
    'schema field' => 'cloc',
  );
  $properties['ccn'] = array(
    'label' => 'ccn',
    'description' => t('ccn'),
    'type' => 'integer',
    'schema field' => 'ccn',
  );
  $properties['ccnMethods'] = array(
    'label' => 'ccnMethods',
    'description' => t('ccnMethods'),
    'type' => 'integer',
    'schema field' => 'ccnMethods',
  );
  $properties['interfaces'] = array(
    'label' => 'Interfaces',
    'description' => t('The number of interfaces (delta).'),
    'type' => 'integer',
    'schema field' => 'interfaces',
  );
  $properties['traits'] = array(
    'label' => 'Traits',
    'description' => t('The number of traits (delta).'),
    'type' => 'integer',
    'schema field' => 'traits',
  );
  $properties['classes'] = array(
    'label' => 'Classes',
    'description' => t('The number of classes (delta).'),
    'type' => 'integer',
    'schema field' => 'classes',
  );
  $properties['abstractClasses'] = array(
    'label' => 'Abstract classes',
    'description' => t('The number of abstract classes (delta).'),
    'type' => 'integer',
    'schema field' => 'abstractClasses',
  );
  $properties['concreteClasses'] = array(
    'label' => 'Concrete classes',
    'description' => t('The number of concrete classes (delta).'),
    'type' => 'integer',
    'schema field' => 'concreteClasses',
  );
  $properties['functions'] = array(
    'label' => 'Functions',
    'description' => t('The number of functions (delta).'),
    'type' => 'integer',
    'schema field' => 'functions',
  );
  $properties['namedFunctions'] = array(
    'label' => 'Named functions',
    'description' => t('The number of named functions (delta).'),
    'type' => 'integer',
    'schema field' => 'namedFunctions',
  );
  $properties['anonymousFunctions'] = array(
    'label' => 'Anonymous functions',
    'description' => t('The number of anonymous functions (delta).'),
    'type' => 'integer',
    'schema field' => 'anonymousFunctions',
  );
  $properties['methods'] = array(
    'label' => 'Methods',
    'description' => t('The number of methods (delta).'),
    'type' => 'integer',
    'schema field' => 'methods',
  );
  $properties['publicMethods'] = array(
    'label' => 'Public methods',
    'description' => t('The number of public methods (delta).'),
    'type' => 'integer',
    'schema field' => 'publicMethods',
  );
  $properties['nonPublicMethods'] = array(
    'label' => 'Non-public methods',
    'description' => t('The number of non-public methods (delta).'),
    'type' => 'integer',
    'schema field' => 'nonPublicMethods',
  );
  $properties['nonStaticMethods'] = array(
    'label' => 'Non-static methods',
    'description' => t('The number of non-static methods (delta).'),
    'type' => 'integer',
    'schema field' => 'nonStaticMethods',
  );
  $properties['staticMethods'] = array(
    'label' => 'Static methods',
    'description' => t('The number of static methods (delta).'),
    'type' => 'integer',
    'schema field' => 'staticMethods',
  );
  $properties['constants'] = array(
    'label' => 'Constants',
    'description' => t('The number of constants (delta).'),
    'type' => 'integer',
    'schema field' => 'constants',
  );
  $properties['classConstants'] = array(
    'label' => 'classConstants',
    'description' => t('The number of class constants (delta).'),
    'type' => 'integer',
    'schema field' => 'classConstants',
  );
  $properties['globalConstants'] = array(
    'label' => 'Global constants',
    'description' => t('The number of global constants (delta).'),
    'type' => 'integer',
    'schema field' => 'globalConstants',
  );
  $properties['testClasses'] = array(
    'label' => 'Test classes',
    'description' => t('The number of test classes (delta).'),
    'type' => 'integer',
    'schema field' => 'testClasses',
  );
  $properties['testMethods'] = array(
    'label' => 'Test methods',
    'description' => t('The number of test methods (delta).'),
    'type' => 'integer',
    'schema field' => 'testMethods',
  );
  $properties['ccnByLloc'] = array(
    'label' => 'ccnByLloc',
    'description' => t('ccnByLloc'),
    'type' => 'decimal',
    'schema field' => 'ccnByLloc',
  );
  $properties['ccnByNom'] = array(
    'label' => 'ccnByNom',
    'description' => t('ccnByNom'),
    'type' => 'decimal',
    'schema field' => 'ccnByNom',
  );
  $properties['llocByNoc'] = array(
    'label' => 'llocByNoc',
    'description' => t('llocByNoc'),
    'type' => 'integer',
    'schema field' => 'llocByNoc',
  );
  $properties['llocByNom'] = array(
    'label' => 'llocByNom',
    'description' => t('llocByNom'),
    'type' => 'integer',
    'schema field' => 'llocByNom',
  );
  $properties['llocByNof'] = array(
    'label' => 'llocByNof',
    'description' => t('llocByNof'),
    'type' => 'integer',
    'schema field' => 'llocByNof',
  );
  $properties['methodCalls'] = array(
    'label' => 'Method calls',
    'description' => t('The number of method calls (delta).'),
    'type' => 'integer',
    'schema field' => 'methodCalls',
  );
  $properties['staticMethodCalls'] = array(
    'label' => 'Static method calls',
    'description' => t('The number of static method calls (delta).'),
    'type' => 'integer',
    'schema field' => 'staticMethodCalls',
  );
  $properties['instanceMethodCalls'] = array(
    'label' => 'Instance method calls',
    'description' => t('The number of instance method calls (delta).'),
    'type' => 'integer',
    'schema field' => 'instanceMethodCalls',
  );
  $properties['attributeAccesses'] = array(
    'label' => 'Attribute accesses',
    'description' => t('The number of attribute accesses (delta).'),
    'type' => 'integer',
    'schema field' => 'attributeAccesses',
  );
  $properties['staticAttributeAccesses'] = array(
    'label' => 'Static attribute accesses',
    'description' => t('The number of static attributes accesses (delta).'),
    'type' => 'integer',
    'schema field' => 'staticAttributeAccesses',
  );
  $properties['instanceAttributeAccesses'] = array(
    'label' => 'Instance attribute accesses',
    'description' => t('The number of instants attribute accesses (delta).'),
    'type' => 'integer',
    'schema field' => 'instanceAttributeAccesses',
  );
  $properties['globalAccesses'] = array(
    'label' => '"Global accesses',
    'description' => t('The number of global accesses (delta).'),
    'type' => 'integer',
    'schema field' => 'globalAccesses',
  );
  $properties['globalVariableAccesses'] = array(
    'label' => 'Global variable accesses',
    'description' => t('The number of global variable accesses (delta).'),
    'type' => 'integer',
    'schema field' => 'globalVariableAccesses',
  );
  $properties['superGlobalVariableAccesses'] = array(
    'label' => 'Super global variable accesses',
    'description' => t('The number of super global variable accesses'),
    'type' => 'integer',
    'schema field' => 'superGlobalVariableAccesses',
  );
  $properties['globalConstantAccesses'] = array(
    'label' => 'Global constant accesses',
    'description' => t('The number of global constant accesses (delta).'),
    'type' => 'integer',
    'schema field' => 'globalConstantAccesses',
  );
  $properties['directories'] = array(
    'label' => 'Directories',
    'description' => t('The number of directories (delta).'),
    'type' => 'integer',
    'schema field' => 'directories',
  );
  $properties['namespaces'] = array(
    'label' => 'Namespaces',
    'description' => t('The number of namespaces (delta).'),
    'type' => 'integer',
    'schema field' => 'namespaces',
  );
  $properties['ncloc'] = array(
    'label' => 'ncloc',
    'description' => t('ncloc'),
    'type' => 'integer',
    'schema field' => 'ncloc',
  );

  return $info;
}


/**
 * Access callback.
 */
function projectqa_phploc_result_access($op, $projectqa_phploc_result, $account = NULL, $entity_type = NULL) {
  global $user;
  if (!isset($account)) {
    $account = $user;
  }
  switch ($op) {
    case 'create':
      return user_access('administer projectqa_phploc_result entities', $account)
          || user_access('create projectqa_phploc_result entities', $account);
    case 'view':
      return user_access('administer projectqa_phploc_result entities', $account)
          || user_access('view projectqa_phploc_result entities', $account);
  }
}


/**
 * Implements hook_permission().
 */
function projectqa_phploc_result_permission() {
  $permissions = array(
    'create projectqa_phploc_result entities' => array(
      'title' => t('Create projectqa_phploc_result'),
      'description' => t('Allows users to create projectqa_phploc_result.'),
      'restrict access' => TRUE,
    ),
    'view projectqa_phploc_result entities' => array(
      'title' => t('View projectqa_phploc_result'),
      'description' => t('Allows users to view projectqa_phploc_result.'),
      'restrict access' => TRUE,
    ),
  );
  return $permissions;
}


/**
 * PhplocResult class.
 */
class PhplocResult extends Entity {

  /**
   * The default label.
   *
   * @return int
   *   projectqa_phploc_result prid
   */
  protected function defaultLabel() {
    return $this->prid;
  }

  /**
   * The default URI.
   *
   * @return array
   *   An array containing the path to the projectqa_phploc_result
   */
  protected function defaultUri() {
    return array('path' => 'projectqa_phploc_result/' . $this->identifier());
  }
}


/**
 * PhplocResultController class
 */
class PhplocResultController extends EntityAPIController {}
