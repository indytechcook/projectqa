<?php
/**
 * @file
 * projectqa module implementation
 */

module_load_include('inc', 'projectqa', 'projectqa.admin');
module_load_include('inc', 'projectqa', 'projectqa.phploc');
module_load_include('inc', 'projectqa', 'projectqa.git');


/**
 * Get a list of projects registered to track.
 *
 * @param array $header
 *   The header array to sort on.
 *
 * @return array
 *   The list of projects.
 */
function projectqa_get_projects($header = NULL) {
  $query = 'SELECT pid, name, url, branch FROM projectqa_repo';
  $result = db_query($query);
  $projects = $result->fetchAll();

  return $projects;
}


/**
 * Gets the filepath to where the project repos are stored locally.
 *
 * @return string
 *   The system path to the repos location.
 */
function projectqa_get_filepath() {
  $path = variable_get('projectqa_filepath', '/tmp/projectqa');

  return $path;
}


/**
 * Walks through all projects currently tracked.
 */
function projectqa_walk_projects() {
  $projects = projectqa_get_projects();
  $filepath = projectqa_get_filepath();

  foreach ($projects as $project) {
    drush_print(t('Processing @name', array('@name' => $project->name)), 0);

    projectqa_process_project($project);
  }
}

/**
 * Processes a single project
 *
 * @param $repo ProjectQARepo
 */
function projectqa_process_project($repo) {
  $filepath = projectqa_get_filepath();

  $repo_path = $filepath . '/' . $repo->name;
  projectqa_prep_repo($repo, $repo_path);
  projectqa_walk_repo($repo, $repo_path);
}


/**
 * Preps the repo to be processed. Clones/updates and does appropriate checkout.
 */
function projectqa_prep_repo($project, $repo_path) {
  // Check for exisisting copy of the repo.
  if (file_exists($repo_path)) {
    // Update repo.
    projectqa_execute_git($repo_path, 'pull');
  }
  else {
    // Get the repo.
    exec('git clone ' . $project->url . ' ' . $repo_path);
  }

  // Checkout the specified branch.
  projectqa_execute_git($repo_path, 'checkout ' . $project->branch);
}


/**
 * Walks the specified repo (all commits in history).
 *
 * @param object $project
 *   The project object.
 *
 * @param string $repo_path
 *   The system path where the repo is located.
 */
function projectqa_walk_repo($project, $repo_path) {
  drush_print(t('walking repo'), 1);

  // Get the currently saved git commits.
  $query = 'SELECT gc.sha1 FROM {projectqa_gitcommit} AS gc WHERE gc.pid = :pid ORDER BY gc.timestamp DESC';
  $result = db_query($query, array(':pid' => $project->pid));
  $processed_commits = $result->fetchCol();

  $log_options[] = '--no-merges';
  $log_options[] = '--date-order';
  $log_options[] = '--reverse';
  $log_options[] = '--format=medium';
  $log_options[] = $project->branch;

  $log = projectqa_execute_git($repo_path, 'log', $log_options);
  $revisions = projectqa_process_git_revisions($log);
  $all_hashes = array_keys($revisions);

  $unprocessed_commits = array_diff($all_hashes, $processed_commits);
  $total_num = count($unprocessed_commits);

  $iteration_counter = 0;
  foreach ($unprocessed_commits as $commit_hash) {
    if ($iteration_counter % 50 == 0) {
      drush_print(
        t('commit @num of @total',
          array(
            '@num' => $iteration_counter,
            '@total' => $total_num)),
        1);
    }
    $iteration_counter++;
    // Check out this commit.
    projectqa_execute_git(
      $repo_path,
      'checkout',
      array(
        '--force',
        '--quiet',
        $commit_hash,
        '2>&1',
      )
    );

    $git_commit_data = array(
      'sha1' => $commit_hash,
      'pid' => $project->pid,
      'timestamp' => $revisions[$commit_hash]['date']->getTimestamp(),
      'author' => $revisions[$commit_hash]['author'],
    );
    $git_commit = entity_create('projectqa_gitcommit', $git_commit_data);
    $git_commit->save();

    module_invoke_all("eval_gitcommit", $repo_path, $git_commit);
  }

  // Reset the repo back to HEAD.
  projectqa_execute_git(
    $repo_path,
    'checkout',
    array(
      '--force',
      '--quiet',
      $project->branch,
    )
  );

  // Refresh the git tags.
  projectqa_process_git_tags($repo_path, $project->pid);
}


/**
 * Processes the git response into an array of revisions data.
 *
 * @param array $git_log
 *   The git log response to process.
 *
 * @return array
 *   The revisions information array.
 */
function projectqa_process_git_revisions($git_log) {
  $num_lines  = count($git_log);
  $revisions = array();

  // For each line in the log.
  for ($i = 0; $i < $num_lines; $i++) {

    // Convert the line to an array to process.
    $tmp = explode(' ', $git_log[$i]);

    // Line has just commit info.
    if (count($tmp) == 2 && $tmp[0] == 'commit') {
      $sha1 = $tmp[1];
    }

    // Line has author info.
    elseif (count($tmp) == 4 && $tmp[0] == 'Author:') {
      $author = implode(' ', array_slice($tmp, 1));
    }

    // Line has author, date, and message.
    elseif (count($tmp) == 9 && $tmp[0] == 'Date:') {
      $revisions[$sha1] = array(
        'author'  => $author,
        'date'    => \DateTime::createFromFormat(
          'D M j H:i:s Y O',
          implode(' ', array_slice($tmp, 3))
        ),
        'message' => isset($git_log[$i + 2]) ? trim($git_log[$i + 2]) : '',
      );
    }
  }

  return $revisions;
}


/**
 * Processes the git response into an array of tag data.
 *
 * @param array $repo_path
 *   The system path where the repo is located.
 *
 * @param array $pid
 *   The ID of the project.
 *
 * @return array
 *   The tags information array.
 */
function projectqa_process_git_tags($repo_path, $pid) {
  drush_print(t('walking tags'), 1);
  $all_tags = projectqa_get_all_tags($repo_path);

  $tag_data = array();
  foreach ($all_tags as $tag) {
    $data = explode(' refs/tags/', $tag);
    $tag_data[$data[0]] = $data[1];
  }

  $query = 'SELECT gt.gcid, gt.tagname, gc.sha1 FROM {projectqa_gittag} gt INNER JOIN {projectqa_gitcommit} AS gc ON gc.gcid = gt.gcid WHERE pid = :pid';
  $result = db_query($query, array(':pid' => $pid));
  $processed_tags = $result->fetchAllAssoc('tagname');

  foreach ($tag_data as $key => $value) {
    $data = array();
    if ($processed_tags[$value]->tagname != $value) {
      $gcid = projectqa_get_commit_id($key);

      // Only save tags that point to commits we're tracking.
      if (isset($gcid)) {
        $data['gcid'] = $gcid;
        $data['tagger'] = 'person';
        $data['timestamp'] = 0;
        $data['tagname'] = $value;

        $git_tag = entity_create('projectqa_gittag', $data);
        $git_tag->save();
      }
    }
  }
}


/**
 * Retrieves the ID of a commit.
 *
 * @param string $hash
 *   The commit hash to look up.
 *
 * @return int
 *   The ID.
 */
function projectqa_get_commit_id($hash) {
  $query = 'SELECT gcid, sha1 FROM projectqa_gitcommit WHERE sha1 = :hash';
  $result = db_query($query, array(':hash' => $hash));
  $commit = $result->fetchAssoc();

  return $commit['gcid'];
}
