<?php
/**
 * @file
 * Logic pertaining to PHPLOC
 */


use SebastianBergmann\FinderFacade\FinderFacade;
use SebastianBergmann\PHPLOC\Analyser;


// git show-ref --tags -d


function phploc_eval_gitcommit($repo_path, $git_commit) {
  composer_manager_register_autoloader();
  $project_path = project_qa_get_filepath() . '/' . $project->name;

  $excludes = array();
  $names = array(
    '*.php',
    '*.info',
    '*.module',
    '*.install',
    '*.inc',
  );
  $names_exclude = array();
  $log_options = array();

  // Look for files to evaluate.
  $directories = array();
  $directory = realpath($repo_path);
  if ($directory) {
    $directories[] = $directory;
  }
  $finder = new FinderFacade($directories, $excludes, $names, $names_exclude);
  $files  = $finder->findFiles();

  // Eval the code.
  $analyser = new Analyser();
  $data = $analyser->countFiles($files, TRUE);

  $phploc_result = entity_create('phploc_result', $data);
  $phploc_result->gcid = $git_commit->gcid;
  $phploc_result->save();

  // Generate the delta values.
  $parent_hash = project_qa_get_parent_hash($repo_path, $git_commit->sha1);

  if(count($parent_hash)>0) {
    // Grab the parent hash data
    $query = db_select('phploc_result', 'pr')
      ->fields('pr')
      ->fields('pqgc', array('sha1'))
      ->condition('pqgc.sha1', $parent_hash[0], '=');
    $query->join('project_qa_gitcommit', 'pqgc', 'pqgc.gcid = pr.gcid');
    $result = $query->execute();

    $previous_data = $result->fetchAll();

    if(count($previous_data)>0) {
      foreach (array_keys($data) as $key) {
        $delta = $data[$key] - $previous_data[0]->$key;
        $delta_key = $key . '_delta';
        $data_delta[$delta_key] = $delta;
      }

      $phploc_result_delta = entity_create('phploc_result_delta', $data_delta);
      // print_r($phploc_result_delta);
      $phploc_result_delta->gcid = $git_commit->gcid;
      $phploc_result_delta->parent_gcid = $previous_data[0]->gcid;

      $phploc_result_delta->save();
    }
  }
}
