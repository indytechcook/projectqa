<?php

/**
 * @file
 * Project QA Project entity code.
 */

/**
 * Implements hook_entity_info().
 */
function project_qa_repo_entity_info() {
  return array(
    'project_qa_repo' => array(
      'label' => t('Project QA Project'),
      'entity class' => 'CodeQAProject',
      'controller class' => 'CodeQAProjectController',
      'base table' => 'project_qa_repo',
      'uri callback' => 'project_qa_repo_uri',
      'fieldable' => TRUE,
      'entity keys' => array(
        'id' => 'pid',
      ),
      'static cache' => TRUE,
      'module' => 'project_qa_repo',
      'views controller class' => 'EntityDefaultViewsController',
    ),
  );
}


/**
 * Access callback.
 */
function project_qa_repo_access($op, $project_qa_repo, $account = NULL, $entity_type = NULL) {
  global $user;
  if (!isset($account)) {
    $account = $user;
  }
  switch ($op) {
    case 'create':
      return user_access('administer project_qa_repo entities', $account)
          || user_access('create project_qa_repo entities', $account);
    case 'view':
      return user_access('administer project_qa_repo entities', $account)
          || user_access('view project_qa_repo entities', $account);
    case 'edit':
      return user_access('administer project_qa_repo entities')
          || user_access('edit any project_qa_repo entities')
          || (user_access('edit own project_qa_repo entities') && ($task->uid == $account->uid));
  }
}


/**
 * Implements hook_permission().
 */
function project_qa_repo_permission() {
  $permissions = array(
    'create project_qa_repo entities' => array(
      'title' => t('Create project_qa_repo'),
      'description' => t('Allows users to create project_qa_repo.'),
      'restrict access' => TRUE,
    ),
    'view project_qa_repo entities' => array(
      'title' => t('View project_qa_repo'),
      'description' => t('Allows users to view project_qa_repo.'),
      'restrict access' => TRUE,
    ),
    'edit any project_qa_repo entities' => array(
      'title' => t('Edit any project_qa_repo'),
      'description' => t('Allows users to edit any project_qa_repo.'),
      'restrict access' => TRUE,
    ),
    'edit own project_qa_repo entities' => array(
      'title' => t('Edit own project_qa_repo'),
      'description' => t('Allows users to edit own project_qa_repo.'),
      'restrict access' => TRUE,
    ),
  );
  return $permissions;
}


/**
 * CodeQAProject class.
 */
class CodeQAProject extends Entity {

  /**
   * The default label.
   *
   * @return int
   *   project_qa_repo id
   */
  protected function defaultLabel() {
    return $this->prid;
  }

  /**
   * The default URI.
   *
   * @return array
   *   An array containing the path to the project_qa_repo
   */
  protected function defaultUri() {
    return array('path' => 'project_qa_repo/' . $this->identifier());
  }
}


/**
 * CodeQAProjectController class
 */
class CodeQAProjectController extends EntityAPIController {

  /**
   * Create a project_qa_repo.
   *
   * @param array $values
   *   The values of the project_qa_repo object to create.
   *
   * @return
   */
  public function create(array $values = array()) {
    return parent::create($values);
  }

  public function buildContent($entity, $view_mode = 'full', $langcode = NULL, $content = array()) {
    $wrapper = entity_metadata_wrapper('project_qa_repo', $entity);
    return parent::buildContent($entity, $view_mode, $langcode, $content);
  }
}


/**
 * Load a Git History.
 */
function project_qa_repo_load($prid, $reset = FALSE) {
  $project_qa_repos = project_qa_repo_load_multiple(array($prid), array(), $reset);
  return reset($project_qa_repos);
}


/**
 * Load multiple Git Historys based on certain conditions.
 */
function project_qa_repo_load_multiple($prid = array(), $conditions = array(), $reset = FALSE) {
  return entity_load('project_qa_repo', $prid, $conditions, $reset);
}


/**
 * Save Git History.
 */
function project_qa_repo_save($project_qa_repo) {
  entity_save('project_qa_repo', $project_qa_repo);
}


/**
 * Delete single Git History.
 */
function project_qa_repo_delete($project_qa_repo) {
  entity_delete('project_qa_repo', entity_id('project_qa_repo', $project_qa_repo));
  // TODO: delete associated data?
}


/**
 * Delete multiple Git Historys.
 */
function project_qa_repo_delete_multiple($project_qa_repo_ids) {
  entity_delete_multiple('project_qa_repo', $project_qa_repo_ids);
  // TODO: delete associated data?
}
