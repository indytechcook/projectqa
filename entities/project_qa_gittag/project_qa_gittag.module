<?php

/**
 * @file
 * Project QA Git Tag entity code.
 */

/**
 * Implements hook_entity_info().
 */
function project_qa_gittag_entity_info() {
  return array(
    'project_qa_gittag' => array(
      'label' => t('Project QA Git Tag'),
      'entity class' => 'CodeQAGitTag',
      'controller class' => 'CodeQAGitTagController',
      'base table' => 'project_qa_gittag',
      'uri callback' => 'project_qa_gittag_uri',
      'fieldable' => TRUE,
      'entity keys' => array(
        'id' => 'gtid',
      ),
      'static cache' => TRUE,
      'module' => 'project_qa_gittag',
      'views controller class' => 'EntityDefaultViewsController',
    ),
  );
}


/**
 * Implements hook_entity_property_info().
 */
function project_qa_gittag_entity_property_info() {
  $info = array();
  $properties = &$info['project_qa_gittag']['properties'];

  $properties['gtid'] = array(
    'label' => 'Git tag ID',
    'description' => t('The unique ID for the git tag.'),
    'type' => 'integer',
    'schema field' => 'gcid',
  );
  $properties['gcid'] = array(
    'label' => 'SHA1',
    'description' => t('The id of the git commit.'),
    'type' => 'integer',
    'schema field' => 'sha1',
  );
  $properties['timestamp'] = array(
    'label' => 'Timestamp',
    'description' => t('The Unix timestamp for the git tag.'),
    'type' => 'date',
    'schema field' => 'timestamp',
  );
  $properties['tagname'] = array(
    'label' => 'Author',
    'description' => t('The name of the git tag.'),
    'type' => 'text',
    'schema field' => 'tagname',
  );
  $properties['tagger'] = array(
    'label' => 'Tagger',
    'description' => t('The person who created the tag.'),
    'type' => 'text',
    'schema field' => 'tagger',
  );
  return $info;
}


/**
 * Access callback.
 */
function project_qa_gittag_access($op, $project_qa_gittag, $account = NULL, $entity_type = NULL) {
  global $user;
  if (!isset($account)) {
    $account = $user;
  }
  switch ($op) {
    case 'create':
      return user_access('administer project_qa_gittag entities', $account)
          || user_access('create project_qa_gittag entities', $account);
    case 'view':
      return user_access('administer project_qa_gittag entities', $account)
          || user_access('view project_qa_gittag entities', $account);
    case 'edit':
      return user_access('administer project_qa_gittag entities')
          || user_access('edit any project_qa_gittag entities')
          || (user_access('edit own project_qa_gittag entities') && ($task->uid == $account->uid));
  }
}


/**
 * Implements hook_permission().
 */
function project_qa_gittag_permission() {
  $permissions = array(
    'create project_qa_gittag entities' => array(
      'title' => t('Create project_qa_gittag'),
      'description' => t('Allows users to create project_qa_gittag.'),
      'restrict access' => TRUE,
    ),
    'view project_qa_gittag entities' => array(
      'title' => t('View project_qa_gittag'),
      'description' => t('Allows users to view project_qa_gittag.'),
      'restrict access' => TRUE,
    ),
    'edit any project_qa_gittag entities' => array(
      'title' => t('Edit any project_qa_gittag'),
      'description' => t('Allows users to edit any project_qa_gittag.'),
      'restrict access' => TRUE,
    ),
    'edit own project_qa_gittag entities' => array(
      'title' => t('Edit own project_qa_gittag'),
      'description' => t('Allows users to edit own project_qa_gittag.'),
      'restrict access' => TRUE,
    ),
  );
  return $permissions;
}


/**
 * CodeQAGitTag class.
 */
class CodeQAGitTag extends Entity {

  /**
   * The default label.
   *
   * @return int
   *   project_qa_gittag id
   */
  protected function defaultLabel() {
    return $this->gcid;
  }

  /**
   * The default URI.
   *
   * @return array
   *   An array containing the path to the project_qa_gittag
   */
  protected function defaultUri() {
    return array('path' => 'project_qa_gittag/' . $this->identifier());
  }
}


/**
 * CodeQAProjectController class
 */
class CodeQAGitTagController extends EntityAPIController {

  /**
   * Create a project_qa_gittag.
   *
   * @param array $values
   *   The values of the project_qa_gittag object to create.
   *
   * @return
   */
  public function create(array $values = array()) {
    return parent::create($values);
  }

  public function buildContent($entity, $view_mode = 'full', $langcode = NULL, $content = array()) {
    $wrapper = entity_metadata_wrapper('project_qa_gittag', $entity);
    return parent::buildContent($entity, $view_mode, $langcode, $content);
  }
}


/**
 * Load.
 */
function project_qa_gittag_load($gcid, $reset = FALSE) {
  $project_qa_gittags = project_qa_gittag_load_multiple(array($gcid), array(), $reset);
  return reset($project_qa_gittags);
}


/**
 * Load multiple based on certain conditions.
 */
function project_qa_gittag_load_multiple($gcid = array(), $conditions = array(), $reset = FALSE) {
  return entity_load('project_qa_gittag', $gcid, $conditions, $reset);
}


/**
 * Save.
 */
function project_qa_gittag_save($project_qa_gittag) {
  entity_save('project_qa_gittag', $project_qa_gittag);
}


/**
 * Delete single.
 */
function project_qa_gittag_delete($project_qa_gittag) {
  entity_delete('project_qa_gittag', entity_id('project_qa_gittag', $project_qa_gittag));
}


/**
 * Delete multiple.
 */
function project_qa_gittag_delete_multiple($project_qa_gittag_ids) {
  entity_delete_multiple('project_qa_gittag', $project_qa_gittag_ids);
}
